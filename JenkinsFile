import groovy.json.JsonSlurperClassic

pipeline {
  agent any
  environment {
    AWS_REGION = 'eu-west-2'
  }
  parameters {
    string(name: 'JSON_FILE_PATH', defaultValue: '/var/lib/jenkins/workspace/testparameterstore/test.json')
  }

  stages {
    stage('Create Parameters and Secrets') {
      steps {
        script {
          def jsonFilePath = params.JSON_FILE_PATH

          // Read the JSON file
          def jsonContent = readFile(file: jsonFilePath)
          def json = new JsonSlurperClassic().parseText(jsonContent)

          // Iterate over each entry in the JSON
          json.each { entry ->
            def parameterName = entry.parameter.name
            def parameterValue = entry.parameter.value
            def secretName = entry.secret.name
            def secretValue = entry.secret.value

            // Create or update the parameter
            withAWS(region: AWS_REGION, credentials: 'aws_creds') {
              def existingParameter = sh(returnStatus: true, script: "aws ssm get-parameter --name ${parameterName}")

              if (existingParameter == 0) {
                updateParameter(parameterName, parameterValue)
              } else {
                createParameter(parameterName, parameterValue)
              }
            }

            // Create or update the secret
            withAWS(region: AWS_REGION, credentials: 'aws_creds') {
              def existingSecret = sh(returnStatus: true, script: "aws secretsmanager describe-secret --secret-id ${secretName}")

              if (existingSecret == 0) {
                updateSecret(secretName, secretValue)
              } else {
                createSecret(secretName, secretValue)
              }
            }
          }
        }
      }
    }
  }
}

def updateParameter(parameterName, parameterValue) {
  sh "aws ssm put-parameter --name ${parameterName} --value ${parameterValue} --type String --overwrite"
}

def createParameter(parameterName, parameterValue) {
  sh "aws ssm put-parameter --name ${parameterName} --value ${parameterValue} --type String"
}

def updateSecret(secretName, secretValue) {
  sh "aws secretsmanager update-secret --secret-id ${secretName} --secret-string ${secretValue}"
}

def createSecret(secretName, secretValue) {
  sh "aws secretsmanager create-secret --name ${secretName} --secret-string ${secretValue}"
}
